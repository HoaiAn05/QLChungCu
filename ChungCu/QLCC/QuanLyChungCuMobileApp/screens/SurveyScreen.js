// import React, { useContext, useEffect, useState } from 'react';
// import { View, Text, StyleSheet, FlatList, Alert, Button } from 'react-native';
// import { SafeAreaView } from 'react-native-safe-area-context';
// import axios from 'axios';
// import { AuthContext } from '../context/AuthContext';

// export default function SurveyScreen() {
//   const { accessToken, BASE_URL, userInfo } = useContext(AuthContext);
//   const [surveys, setSurveys] = useState([]);
//   const [votes, setVotes] = useState({});
//   const isAdmin = userInfo?.is_staff;

//   useEffect(() => {
//     fetchSurveys();
//     if (isAdmin) {
//       fetchVotes();
//     }
//   }, []);

//   const fetchSurveys = async () => {
//     try {
//       const res = await axios.get(`${BASE_URL}/surveys/`, {
//         headers: { Authorization: `Bearer ${accessToken}` }
//       });
//       setSurveys(res.data);
//     } catch (err) {
//       console.error('L·ªói khi t·∫£i kh·∫£o s√°t:', err);
//       Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i kh·∫£o s√°t');
//     }
//   };

//   const fetchVotes = async () => {
//     try {
//       const res = await axios.get(`${BASE_URL}/votes/`, {
//         headers: { Authorization: `Bearer ${accessToken}` }
//       });
//       const voteCounts = {};
//       res.data.forEach(vote => {
//         voteCounts[vote.option] = (voteCounts[vote.option] || 0) + 1;
//       });
//       setVotes(voteCounts);
//     } catch (err) {
//       console.error('L·ªói khi t·∫£i phi·∫øu b·∫ßu:', err);
//     }
//   };

//   const handleVote = async (optionId) => {
//     try {
//       await axios.post(`${BASE_URL}/votes/`, { option: optionId }, {
//         headers: { Authorization: `Bearer ${accessToken}` }
//       });
//       Alert.alert('Th√†nh c√¥ng', 'B·∫°n ƒë√£ b·ªè phi·∫øu');
//       fetchSurveys();
//     } catch (err) {
//       console.error('L·ªói khi b·ªè phi·∫øu:', err);
//       Alert.alert('L·ªói', 'B·∫°n ƒë√£ b·ªè phi·∫øu ho·∫∑c x·∫£y ra l·ªói');
//     }
//   };

//   // üë§ Ng∆∞·ªùi d√¢n: hi·ªÉn th·ªã b√¨nh th∆∞·ªùng
//   const renderSurveyForUser = ({ item }) => (
//     <View style={styles.card}>
//       <Text style={styles.question}>{item.title}</Text>
//       <Text style={styles.description}>{item.description}</Text>
//       {item.options?.map(opt => (
//         <View key={opt.id} style={styles.optionRow}>
//           <Text style={styles.optionText}>‚Ä¢ {opt.text}</Text>
//           <Button title="B·ªè phi·∫øu" onPress={() => handleVote(opt.id)} />
//         </View>
//       ))}
//     </View>
//   );

//   // üõ†Ô∏è Admin: ch·ªâ hi·ªÉn th·ªã k·∫øt qu·∫£ phi·∫øu
//   const renderSurveyForAdmin = ({ item }) => (
//     <View style={styles.card}>
//       {item.options?.map(opt => (
//         <View key={opt.id} style={styles.optionRow}>
//           <Text style={styles.optionText}>‚Ä¢ {opt.text}</Text>
//           <Text style={styles.voteCount}>{votes[opt.id] || 0} phi·∫øu</Text>
//         </View>
//       ))}
//     </View>
//   );

//   return (
//     <SafeAreaView style={styles.container}>
//       <Text style={styles.title}>Kh·∫£o s√°t</Text>
//       <FlatList
//         data={surveys}
//         keyExtractor={(item) => item.id.toString()}
//         renderItem={isAdmin ? renderSurveyForAdmin : renderSurveyForUser}
//         ListEmptyComponent={<Text style={styles.empty}>Kh√¥ng c√≥ kh·∫£o s√°t n√†o.</Text>}
//       />
//     </SafeAreaView>
//   );
// }











import React, { useContext, useEffect, useState } from 'react'; 
// Import React v√† c√°c hook c·∫ßn thi·∫øt nh∆∞ useContext, useEffect, useState.

import { View, Text, StyleSheet, FlatList, Alert, Button } from 'react-native'; 
// Import c√°c component t·ª´ React Native: View, Text, StyleSheet, FlatList, Alert, Button.

import { SafeAreaView } from 'react-native-safe-area-context'; 
// Import SafeAreaView ƒë·ªÉ tr√°nh c√°c v√πng kh√¥ng hi·ªÉn th·ªã tr√™n m√†n h√¨nh (ch·∫≥ng h·∫°n nh∆∞ notch ho·∫∑c thanh tr·∫°ng th√°i).

import axios from 'axios'; 
// Import axios ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu HTTP.

import { AuthContext } from '../context/AuthContext'; 
// Import AuthContext ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng (nh∆∞ accessToken, BASE_URL, v√† userInfo) t·ª´ context.

export default function SurveyScreen() { 
  // ƒê·ªãnh nghƒ©a component SurveyScreen.
  const { accessToken, BASE_URL, userInfo } = useContext(AuthContext); 
  // L·∫•y accessToken, BASE_URL, v√† userInfo t·ª´ AuthContext.
  const isAdmin = userInfo?.is_staff; 
  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin hay kh√¥ng.

  const [surveys, setSurveys] = useState([]); 
  // State ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch c√°c kh·∫£o s√°t.

  const [votes, setVotes] = useState({}); 
  // State ƒë·ªÉ l∆∞u tr·ªØ s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu cho m·ªói l·ª±a ch·ªçn (d√†nh cho admin).

  // useEffect s·∫Ω g·ªçi fetchSurveys v√† fetchVotes khi component render l·∫ßn ƒë·∫ßu ti√™n.
  useEffect(() => { 
    fetchSurveys(); 
    if (isAdmin) { 
      fetchVotes(); // N·∫øu l√† admin, g·ªçi h√†m fetchVotes ƒë·ªÉ t·∫£i s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu.
    }
  }, []); 

  const fetchSurveys = async () => { 
    // H√†m g·ªçi API ƒë·ªÉ t·∫£i danh s√°ch kh·∫£o s√°t.
    try {
      const res = await axios.get(`${BASE_URL}/surveys/`, {
        headers: { Authorization: `Bearer ${accessToken}` } 
        // G·ª≠i y√™u c·∫ßu GET t·ªõi API ƒë·ªÉ l·∫•y c√°c kh·∫£o s√°t, k√®m theo accessToken trong header.
      });
      setSurveys(res.data); 
      // C·∫≠p nh·∫≠t state surveys v·ªõi d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API.
    } catch (err) {
      console.error('L·ªói khi t·∫£i kh·∫£o s√°t:', err); 
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i kh·∫£o s√°t'); 
      // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã th√¥ng b√°o l·ªói.
    }
  };

  const fetchVotes = async () => { 
    // H√†m g·ªçi API ƒë·ªÉ t·∫£i s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu cho m·ªói l·ª±a ch·ªçn kh·∫£o s√°t.
    try {
      const res = await axios.get(`${BASE_URL}/votes/`, {
        headers: { Authorization: `Bearer ${accessToken}` } 
        // G·ª≠i y√™u c·∫ßu GET t·ªõi API ƒë·ªÉ l·∫•y phi·∫øu b·∫ßu, k√®m theo accessToken trong header.
      });
      const voteCounts = {}; 
      // Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu cho t·ª´ng l·ª±a ch·ªçn.

      res.data.forEach(vote => { 
        // Duy·ªát qua m·ªói phi·∫øu b·∫ßu v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu cho t·ª´ng l·ª±a ch·ªçn.
        voteCounts[vote.option] = (voteCounts[vote.option] || 0) + 1;
      });

      setVotes(voteCounts); 
      // C·∫≠p nh·∫≠t state votes v·ªõi s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu cho t·ª´ng l·ª±a ch·ªçn.
    } catch (err) {
      console.error('L·ªói khi t·∫£i phi·∫øu b·∫ßu:', err);
      // In l·ªói ra console n·∫øu c√≥ l·ªói trong qu√° tr√¨nh g·ªçi API.
    }
  };

  const handleVote = async (optionId) => { 
    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m b·ªè phi·∫øu.
    try {
      await axios.post(`${BASE_URL}/votes/`, { option: optionId }, {
        headers: { Authorization: `Bearer ${accessToken}` } 
        // G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ b·ªè phi·∫øu cho l·ª±a ch·ªçn v·ªõi optionId t∆∞∆°ng ·ª©ng, k√®m theo accessToken trong header.
      });
      Alert.alert('Th√†nh c√¥ng', 'B·∫°n ƒë√£ b·ªè phi·∫øu'); 
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng khi ng∆∞·ªùi d√πng b·ªè phi·∫øu.
      fetchSurveys(); 
      // T·∫£i l·∫°i danh s√°ch kh·∫£o s√°t ƒë·ªÉ c·∫≠p nh·∫≠t k·∫øt qu·∫£.
    } catch (err) {
      console.error('L·ªói khi b·ªè phi·∫øu:', err); 
      Alert.alert('L·ªói', 'B·∫°n ƒë√£ b·ªè phi·∫øu ho·∫∑c x·∫£y ra l·ªói'); 
      // N·∫øu c√≥ l·ªói trong qu√° tr√¨nh b·ªè phi·∫øu, hi·ªÉn th·ªã th√¥ng b√°o l·ªói.
    }
  };

  // üë§ Ng∆∞·ªùi d√¢n: hi·ªÉn th·ªã kh·∫£o s√°t v√† cho ph√©p b·ªè phi·∫øu
  const renderSurveyForUser = ({ item }) => (
    <View style={styles.card}>
      <Text style={styles.question}>{item.title}</Text>
      {/* Hi·ªÉn th·ªã ti√™u ƒë·ªÅ kh·∫£o s√°t */}
      <Text style={styles.description}>{item.description}</Text>
      {/* Hi·ªÉn th·ªã m√¥ t·∫£ kh·∫£o s√°t */}
      {item.options?.map(opt => (
        <View key={opt.id} style={styles.optionRow}>
          <Text style={styles.optionText}>‚Ä¢ {opt.text}</Text>
          {/* Hi·ªÉn th·ªã vƒÉn b·∫£n l·ª±a ch·ªçn */}
          <Button title="B·ªè phi·∫øu" onPress={() => handleVote(opt.id)} />
          {/* Hi·ªÉn th·ªã n√∫t ƒë·ªÉ ng∆∞·ªùi d√πng b·ªè phi·∫øu cho l·ª±a ch·ªçn */}
        </View>
      ))}
    </View>
  );

  // üõ†Ô∏è Admin: hi·ªÉn th·ªã k·∫øt qu·∫£ phi·∫øu b·∫ßu c·ªßa kh·∫£o s√°t
  const renderSurveyForAdmin = ({ item }) => (
    <View style={styles.card}>
      {/* Duy·ªát qua t·∫•t c·∫£ c√°c l·ª±a ch·ªçn v√† hi·ªÉn th·ªã k·∫øt qu·∫£ phi·∫øu b·∫ßu cho admin */}
      {item.options?.map(opt => (
        <View key={opt.id} style={styles.optionRow}>
          <Text style={styles.optionText}>‚Ä¢ {opt.text}</Text>
          {/* Hi·ªÉn th·ªã vƒÉn b·∫£n l·ª±a ch·ªçn */}
          <Text style={styles.voteCount}>{votes[opt.id] || 0} phi·∫øu</Text>
          {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng phi·∫øu b·∫ßu cho l·ª±a ch·ªçn */}
        </View>
      ))}
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>Kh·∫£o s√°t</Text>
      {/* Ti√™u ƒë·ªÅ c·ªßa m√†n h√¨nh */}

      <FlatList
        data={surveys} 
        keyExtractor={(item) => item.id.toString()} 
        // L·∫•y id c·ªßa m·ªói kh·∫£o s√°t l√†m key cho c√°c ph·∫ßn t·ª≠ trong FlatList
        renderItem={isAdmin ? renderSurveyForAdmin : renderSurveyForUser} 
        // Render kh·∫£o s√°t theo ki·ªÉu ng∆∞·ªùi d√πng ho·∫∑c admin t√πy v√†o quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
        ListEmptyComponent={<Text style={styles.empty}>Kh√¥ng c√≥ kh·∫£o s√°t n√†o.</Text>} 
        // Hi·ªÉn th·ªã th√¥ng b√°o khi kh√¥ng c√≥ kh·∫£o s√°t n√†o.
      />
    </SafeAreaView>
  );
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fefefe',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 12,
  },
  card: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 10,
    padding: 16,
    marginBottom: 16,
    backgroundColor: '#fff',
  },
  question: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 6,
  },
  description: {
    fontSize: 14,
    color: '#666',
    marginBottom: 10,
  },
  optionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginVertical: 6,
  },
  optionText: {
    fontSize: 15,
    flex: 1,
  },
  voteCount: {
    fontSize: 14,
    color: '#333',
    fontWeight: '500',
    marginLeft: 8,
  },
  empty: {
    textAlign: 'center',
    marginTop: 40,
    color: '#999',
    fontSize: 16,
  }
});
